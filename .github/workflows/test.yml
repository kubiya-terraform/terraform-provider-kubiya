# Comprehensive Test workflow for Terraform Provider Kubiya
name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Unit tests and linting (always run)
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Download Go modules
        run: go mod download

      - name: Verify Go modules
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files need formatting:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run unit tests
        run: go test -v -short ./...

  # Integration tests (only if API key is available)
  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ secrets.KUBIYA_API_KEY != '' }}
    
    strategy:
      matrix:
        test-target:
          - "TestKubiyaAgent"
          - "TestKubiyaKnowledge" 
          - "TestKubiyaIntegrations"
          - "TestKubiyaSources"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~> 1.0"
          terraform_wrapper: false

      - name: Download Go modules
        run: go mod download

      - name: Run integration test - ${{ matrix.test-target }}
        env:
          KUBIYA_API_KEY: ${{ secrets.KUBIYA_API_KEY }}
        run: |
          cd test
          go test -v -timeout 30m -run "^${{ matrix.test-target }}$" ./...

      - name: Clean up Terraform state files
        if: always()
        run: |
          find examples -name "*.tfstate*" -type f -delete
          find examples -name ".terraform" -type d -exec rm -rf {} + || true
          find examples -name ".terraform.lock.hcl" -type f -delete || true 